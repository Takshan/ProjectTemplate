{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Except",
				"Exception as e:\n\traise ValueError"
			],
			[
				"Da",
				"DataFrame"
			],
			[
				"file",
				"file_path"
			],
			[
				"isins",
				"isinstance(file_path, str):\n\tfile"
			],
			[
				"kwargs",
				"kwargs.get(\"match\", False)"
			],
			[
				"aut",
				"autobox[0"
			],
			[
				"verbose",
				"verbose = False"
			],
			[
				"Data",
				"DataFrame"
			],
			[
				"iter",
				"itertools.combinations"
			],
			[
				"write",
				"write_affinity"
			],
			[
				"patter",
				"pattern_id"
			],
			[
				"start",
				"startswith(\"MODEL\"):\n\ts"
			],
			[
				"elif",
				"elif algo_format.lower()"
			],
			[
				"manu",
				"manual_config_format"
			],
			[
				"cluster",
				"cluster=cluster,\n )\n else:"
			],
			[
				"dir_name",
				"dir_name_cwd"
			],
			[
				"dir",
				"dir_name"
			],
			[
				"chec",
				"check_names(manual_"
			],
			[
				"enter_out",
				"enter_output}\" if enter_output else \"\""
			],
			[
				"enter",
				"enter_output"
			],
			[
				"kwaRG",
				"kwargs.get(\""
			],
			[
				"output",
				"output= output_file_name"
			],
			[
				"Inva",
				"Invalid cluster name\"\n"
			],
			[
				"cl",
				"cluster_grp"
			],
			[
				"CUSTOM_SCORE",
				"CUSTOM_SCORE is not None and"
			],
			[
				"C",
				"CUSTOM_SCORE"
			],
			[
				"Gene",
				"Generated"
			],
			[
				"Ge",
				"Generated/"
			],
			[
				"file_",
				"file_format = \""
			],
			[
				"Va",
				"ValueError:\n\ttable.add_row(\"[bold green]"
			],
			[
				"except",
				"except ValueError:\n\t            table.add_row("
			],
			[
				"add_",
				"add_row"
			],
			[
				"tab",
				"table.add_"
			],
			[
				"excep",
				"except ValueError:\n\t"
			],
			[
				"Mol",
				"MolView"
			],
			[
				"Ser",
				"ServerPath"
			],
			[
				"Instacne",
				"isinstance"
			],
			[
				"Docking",
				"DockingTools"
			],
			[
				"KinaseMod",
				"KinaseModule import *"
			],
			[
				"setSty",
				"setStyle"
			],
			[
				"element",
				"element}\"}, {\"stick\": {\"colorscheme\": self.lig_color}"
			],
			[
				"Excep",
				"Exception as e:\n\t"
			],
			[
				"config",
				"config_file_name)\n"
			],
			[
				"mana",
				"manual_config"
			],
			[
				"manual",
				"manual_config="
			],
			[
				"clear",
				"clear_output()"
			],
			[
				"msg",
				"msg_header"
			],
			[
				"default",
				"default_checkbox"
			],
			[
				"sty",
				"style_avaiable"
			],
			[
				"view_obj",
				"view_object = self.view"
			],
			[
				"smi2",
				"smi2viewer"
			],
			[
				"entered",
				"entered_smiles"
			],
			[
				"interac",
				"interactive"
			],
			[
				"get",
				"get('size')\n"
			],
			[
				"__init",
				"__init__"
			],
			[
				"self",
				"self.box_size_z = 15\nself"
			],
			[
				"bo",
				"box_size_y"
			],
			[
				"box",
				"box_size_x"
			],
			[
				"el",
				"elif key == 'box_size_z':"
			],
			[
				"box_cen",
				"box_center_z"
			],
			[
				"box_center",
				"box_center_y"
			],
			[
				"ligand",
				"ligand = ligand\n"
			],
			[
				"inte",
				"interactive"
			]
		]
	},
	"buffers":
	[
		{
			"file": "Project.py",
			"settings":
			{
				"buffer_size": 10100,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "DockingTools.py",
			"settings":
			{
				"buffer_size": 37840,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					6475,
					1,
					"insert",
					{
						"characters": "\\n"
					},
					"AgAAAOw7AAAAAAAA7TsAAAAAAAAAAAAA7TsAAAAAAADuOwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADsOwAAAAAAAOw7AAAAAAAAAAAAAAAA8L8"
				],
				[
					6479,
					1,
					"black",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASOwAAAAAAABI7AAAAAAAAAAAAAAAA8L8"
				],
				[
					6486,
					1,
					"insert",
					{
						"characters": "\\n"
					},
					"AgAAAMg8AAAAAAAAyTwAAAAAAAAAAAAAyTwAAAAAAADKPAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADIPAAAAAAAAMg8AAAAAAAAAAAAAAAA8L8"
				],
				[
					6490,
					1,
					"black",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACLPAAAAAAAAIs8AAAAAAAAAAAAAAAA8L8"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				"Syntax Check"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"doc",
				"AutoDocstring: Current"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"fix",
				"Python Fix Imports"
			],
			[
				"inde",
				"Indentation: Convert to Spaces"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Z/home/lab09/SPACE/Rahul-Iikwon",
		"/Z/home/lab09/SPACE/Rahul-Iikwon/csfdock"
	],
	"file_history":
	[
		"/Z/home/lab09/SPACE/Rahul-Iikwon/Generated/jobs/3eml/3eml_ligand_output_dkoes_scoring_old.pdb",
		"/Z/home/lab09/SPACE/Rahul-Iikwon/Generated/jobs/3eml/run/3eml_SMina.sh",
		"/Z/home/lab09/SPACE/Rahul-Iikwon/csfdock/DVisualize.py",
		"/Z/home/lab09/SPACE/Rahul-Iikwon/csfdock/Project.py",
		"/Z/home/lab09/SPACE/Rahul-Iikwon/csfdock/DockingTools.py",
		"/Z/home/lab09/DOCKER/CSF/DATA/Actives/6nzp_active_complete.sdf",
		"/Z/home/lab09/POSTGRES/docker-compose.yml",
		"/Z/home/lab09/DOCKER/CSF/DATA/Inactive/6nzp_decoy_complete.sdf",
		"/Z/home/lab09/DOCKER/CSF/DATA/Inactive/6nzp_decoy_complete_fix.sdf",
		"/Z/home/lab09/DOCKER/CSF/data/Inactive/dude-decoys/decoys/6nzp_all_decoys.smi",
		"/Z/home/lab09/DOCKER/CSF/scores.txt",
		"/Z/home/lab09/DOCKER/6NZP/Generated/data/6nzp_best.pdbqt",
		"/Z/home/lab09/DOCKER/gpu-jupyter/data/6NZP/Generated/2rgp.pdb",
		"/Z/home/lab09/DOCKER/gpu-jupyter/data/6NZP/DATA/membrane.pdb",
		"/Z/home/lab09/DOCKER/gpu-jupyter/data/6NZP/Scripts/utils.py",
		"/Z/home/lab09/DOCKER/gpu-jupyter/data/6NZP/Scripts/ar2a_v3.py",
		"/Z/home/lab09/DOCKER/gpu-jupyter/data/6NZP/Scripts/MolView.py",
		"/Z/home/lab09/DOCKER/gpu-jupyter/data/6NZP/Scripts/ServerPath.py",
		"/Z/home/lab09/DOCKER/gpu-jupyter/data/6NZP/Scripts/DVisualize.py",
		"/Z/home/lab09/DOCKER/gpu-jupyter/data/6NZP/Scripts/DockingTools.py",
		"/Z/home/lab09/DOCKER/gpu-jupyter/data/6NZP/Scripts/__init__.py",
		"/Z/home/lab09/DOCKER/gpu-jupyter/data/6NZP/Scripts/main.py",
		"/Z/home/lab09/DOCKER/gpu-jupyter/data/6NZP/ar2a_v3.py",
		"/Z/home/lab09/DOCKER/gpu-jupyter/data/6NZP/DockingTools.py",
		"/Z/home/lab09/DOCKER/gpu-jupyter/data/6NZP/Utility.py",
		"/Z/home/lab09/DOCKER/gpu-jupyter/.build/start.sh",
		"/Z/home/lab09/DOCKER/gpu-jupyter/build_push_all.sh",
		"/Z/home/lab09/DOCKER/gpu-jupyter/.build/docker-stacks/base-notebook/start.sh",
		"/Z/home/lab09/DOCKER/gpu-jupyter/.build/docker-stacks/base-notebook/Dockerfile.ppc64le.patch",
		"/Z/home/lab09/DOCKER/gpu-jupyter/.build/docker-stacks/base-notebook/Dockerfile",
		"/Z/home/lab09/DOCKER/gpu-jupyter/.build/Dockerfile",
		"/Z/home/lab09/DOCKER/Rahul-IIkwon/ar2a_v3.py",
		"/Z/home/lab09/DOCKER/Rahul-IIkwon/KinaseModules.py",
		"/Z/home/lab09/DOCKER/Rahul-IIkwon/ar2r.py",
		"/Z/home/lab09/DOCKER/DEV/Kinase_CLassifier/KC/KinaseModules.py",
		"/Z/home/lab09/DOCKER/Rahul-IIkwon/RawData/smiles/Conformer3D_CID_2244.sdf"
	],
	"find":
	{
		"height": 27.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"obabel",
			"Nomatch",
			"dir_name_"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"nomatch",
			"dir_name"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Project.py",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 10100,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "DockingTools.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37840,
						"regions":
						{
						},
						"selection":
						[
							[
								13647,
								13644
							]
						],
						"settings":
						{
							"auto_complete": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										13645,
										13646
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										13531,
										13532
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 14940.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 39.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.black":
	{
		"height": 126.0
	},
	"output.exec":
	{
		"height": 78.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "Rahul-iikwon.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 121.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
